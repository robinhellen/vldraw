/* geometry.h generated by valac 0.18.1, the Vala compiler, do not modify */


#ifndef __GEOMETRY_H__
#define __GEOMETRY_H__

#include <glib.h>
#include <glib-object.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define LDRAW_MATHS_TYPE_BOUNDS (ldraw_maths_bounds_get_type ())
#define LDRAW_MATHS_BOUNDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LDRAW_MATHS_TYPE_BOUNDS, LdrawMathsBounds))
#define LDRAW_MATHS_BOUNDS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LDRAW_MATHS_TYPE_BOUNDS, LdrawMathsBoundsClass))
#define LDRAW_MATHS_IS_BOUNDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LDRAW_MATHS_TYPE_BOUNDS))
#define LDRAW_MATHS_IS_BOUNDS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LDRAW_MATHS_TYPE_BOUNDS))
#define LDRAW_MATHS_BOUNDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LDRAW_MATHS_TYPE_BOUNDS, LdrawMathsBoundsClass))

typedef struct _LdrawMathsBounds LdrawMathsBounds;
typedef struct _LdrawMathsBoundsClass LdrawMathsBoundsClass;
typedef struct _LdrawMathsBoundsPrivate LdrawMathsBoundsPrivate;

#define LDRAW_MATHS_TYPE_VECTOR (ldraw_maths_vector_get_type ())
typedef struct _LdrawMathsVector LdrawMathsVector;

#define LDRAW_MATHS_TYPE_MATRIX (ldraw_maths_matrix_get_type ())
typedef struct _LdrawMathsMatrix LdrawMathsMatrix;

typedef float v4sf __attribute__ ((vector_size(16), aligned(16)));

struct _LdrawMathsMatrix {
	v4sf row0;
	v4sf row1;
	v4sf row2;
} __attribute__((aligned(16)));

struct _LdrawMathsVector {
	v4sf values;
} __attribute__((aligned(16)));

struct _LdrawMathsBounds {
	GTypeInstance parent_instance;
	volatile int ref_count;
	LdrawMathsBoundsPrivate * priv;
	LdrawMathsVector m_Min;
	LdrawMathsVector m_Max;
	gboolean m_Initialized;
};

struct _LdrawMathsBoundsClass {
	GTypeClass parent_class;
	void (*finalize) (LdrawMathsBounds *self);
};


gpointer ldraw_maths_bounds_ref (gpointer instance);
void ldraw_maths_bounds_unref (gpointer instance);
GParamSpec* ldraw_maths_param_spec_bounds (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void ldraw_maths_value_set_bounds (GValue* value, gpointer v_object);
void ldraw_maths_value_take_bounds (GValue* value, gpointer v_object);
gpointer ldraw_maths_value_get_bounds (const GValue* value);
GType ldraw_maths_bounds_get_type (void) G_GNUC_CONST;
GType ldraw_maths_vector_get_type (void) G_GNUC_CONST;
LdrawMathsVector* ldraw_maths_vector_dup (const LdrawMathsVector* self);
void ldraw_maths_vector_free (LdrawMathsVector* self);
LdrawMathsBounds* ldraw_maths_bounds_new (void);
LdrawMathsBounds* ldraw_maths_bounds_construct (GType object_type);
LdrawMathsBounds* ldraw_maths_bounds_new_Clone (LdrawMathsBounds* b);
LdrawMathsBounds* ldraw_maths_bounds_construct_Clone (GType object_type, LdrawMathsBounds* b);
void ldraw_maths_bounds_Union (LdrawMathsBounds* self, LdrawMathsVector* v);
GType ldraw_maths_matrix_get_type (void) G_GNUC_CONST;
LdrawMathsMatrix* ldraw_maths_matrix_dup (const LdrawMathsMatrix* self);
void ldraw_maths_matrix_free (LdrawMathsMatrix* self);
void ldraw_maths_matrix_copy (const LdrawMathsMatrix* self, LdrawMathsMatrix* dest);
void ldraw_maths_matrix_destroy (LdrawMathsMatrix* self);
void ldraw_maths_bounds_IncludeBounds (LdrawMathsBounds* self, LdrawMathsBounds* b, LdrawMathsMatrix* transform, LdrawMathsVector* center);
void ldraw_maths_bounds_Center (LdrawMathsBounds* self, LdrawMathsVector* result);
LdrawMathsBounds* ldraw_maths_bounds_Scale (LdrawMathsBounds* self, gfloat scale);
LdrawMathsBounds* ldraw_maths_bounds_Transform (LdrawMathsBounds* self, LdrawMathsMatrix* m, LdrawMathsVector* pos);
gchar* ldraw_maths_bounds_to_string (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MaxX (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MaxY (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MaxZ (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MinX (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MinY (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_MinZ (LdrawMathsBounds* self);
gfloat ldraw_maths_bounds_get_Radius (LdrawMathsBounds* self);
extern LdrawMathsMatrix* ldraw_maths_matrix_s_NullMatrix;
extern LdrawMathsMatrix* ldraw_maths_matrix_s_Identity;
void ldraw_maths_matrix_init (LdrawMathsMatrix *self, gfloat a, gfloat b, gfloat c, gfloat d, gfloat e, gfloat f, gfloat g, gfloat h, gfloat i);
void ldraw_maths_matrix_init_ForRotation (LdrawMathsMatrix *self, LdrawMathsVector* axis, gfloat angle);
void ldraw_maths_matrix_TransformMatrix (LdrawMathsMatrix *self, LdrawMathsMatrix* m, LdrawMathsMatrix* result);
void ldraw_maths_matrix_Add (LdrawMathsMatrix *self, LdrawMathsMatrix* m, LdrawMathsMatrix* result);
void ldraw_maths_matrix_Scale (LdrawMathsMatrix *self, gfloat scale, LdrawMathsMatrix* result);
void ldraw_maths_matrix_TransformVector (LdrawMathsMatrix *self, LdrawMathsVector* v, LdrawMathsVector* result);
gfloat ldraw_maths_matrix_get (LdrawMathsMatrix *self, gint row, gint col);
gchar* ldraw_maths_matrix_to_string (LdrawMathsMatrix *self);
void ldraw_maths_matrix_get_NullMatrix (LdrawMathsMatrix* result);
void ldraw_maths_matrix_get_Identity (LdrawMathsMatrix* result);
gfloat ldraw_maths_matrix_get_Determinant (LdrawMathsMatrix* self);
extern LdrawMathsVector* ldraw_maths_vector_s_NullVector;
void ldraw_maths_vector_init (LdrawMathsVector *self, gfloat x, gfloat y, gfloat z);
void ldraw_maths_vector_init_Min (LdrawMathsVector *self, LdrawMathsVector* a, LdrawMathsVector* b);
void ldraw_maths_vector_init_Max (LdrawMathsVector *self, LdrawMathsVector* a, LdrawMathsVector* b);
void ldraw_maths_vector_Add (LdrawMathsVector *self, LdrawMathsVector* v, LdrawMathsVector* result);
void ldraw_maths_vector_Subtract (LdrawMathsVector *self, LdrawMathsVector* v, LdrawMathsVector* result);
void ldraw_maths_vector_Cross (LdrawMathsVector *self, LdrawMathsVector* v, LdrawMathsVector* result);
gfloat ldraw_maths_vector_Dot (LdrawMathsVector *self, LdrawMathsVector* v);
void ldraw_maths_vector_Normalized (LdrawMathsVector *self, LdrawMathsVector* result);
void ldraw_maths_vector_Scale (LdrawMathsVector *self, gfloat scale, LdrawMathsVector* result);
gchar* ldraw_maths_vector_to_string (LdrawMathsVector *self);
void ldraw_maths_vector_get_NullVector (LdrawMathsVector* result);
gfloat ldraw_maths_vector_get_X (LdrawMathsVector* self);
gfloat ldraw_maths_vector_get_Y (LdrawMathsVector* self);
gfloat ldraw_maths_vector_get_Z (LdrawMathsVector* self);
gfloat ldraw_maths_vector_get_Magnitude (LdrawMathsVector* self);
gfloat *ldraw_maths_vector_value_vector(LdrawMathsVector* self);


G_END_DECLS

#endif
